// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oazA1YFPiZCNccrS5tDgY4
// Component: DIWKlDbCaop
import * as React from "react";
import Head from "next/head";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: aFWX1tNWFIs/component
import Task from "../../Task"; // plasmic-import: nBTO5Pj6Yru/component
import Footer from "../../Footer"; // plasmic-import: sXlYIJb-6PO/component
import { useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: x3o5Jg0GQTk/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_todo_mvc.module.css"; // plasmic-import: oazA1YFPiZCNccrS5tDgY4/projectcss
import * as sty from "./PlasmicTodoApp.module.css"; // plasmic-import: DIWKlDbCaop/css

export const PlasmicTodoApp__VariantProps = new Array("state");

export const PlasmicTodoApp__ArgProps = new Array();

function PlasmicTodoApp__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),

              [sty.root__state_empty]: hasVariant(variants, "state", "empty")
            }
          )}
        >
          <div
            data-plasmic-name={"appTitle"}
            data-plasmic-override={overrides.appTitle}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.appTitle,
              {
                [sty.appTitle__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              }
            )}
          >
            {"todos"}
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__cuS, {
              [sty.freeBox__global_theme_dark__cuSBeqsa]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <div
              data-plasmic-name={"appBody"}
              data-plasmic-override={overrides.appBody}
              className={classNames(projectcss.all, sty.appBody, {
                [sty.appBody__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            >
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header, {
                  [sty.header__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),

                  [sty.header__state_empty]: hasVariant(
                    variants,
                    "state",
                    "empty"
                  )
                })}
                state={
                  hasVariant(variants, "state", "empty") ? "empty" : undefined
                }
              />

              {(hasVariant(variants, "state", "empty") ? false : true) ? (
                <div
                  data-plasmic-name={"tasksContainer"}
                  data-plasmic-override={overrides.tasksContainer}
                  className={classNames(projectcss.all, sty.tasksContainer, {
                    [sty.tasksContainer__state_empty]: hasVariant(
                      variants,
                      "state",
                      "empty"
                    )
                  })}
                >
                  <Task
                    className={classNames("__wab_instance", sty.task__l1YuH, {
                      [sty.task__global_theme_dark__l1YuHBeqsa]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      ),

                      [sty.task__state_empty__l1YuHTyuma]: hasVariant(
                        variants,
                        "state",
                        "empty"
                      )
                    })}
                  >
                    {"Some kind of text here"}
                  </Task>

                  <Task
                    className={classNames("__wab_instance", sty.task__soTt3, {
                      [sty.task__global_theme_dark__soTt3Beqsa]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })}
                    state={"editing"}
                  >
                    {"Some kind of text here"}
                  </Task>

                  <Task
                    className={classNames("__wab_instance", sty.task__zhLtH)}
                    state={"checked"}
                  >
                    {"Some kind of text here"}
                  </Task>

                  <Task
                    className={classNames("__wab_instance", sty.task__uhJXa)}
                  >
                    {"I have a task to do something that takes a long time"}
                  </Task>
                </div>
              ) : null}
              {(hasVariant(variants, "state", "empty") ? false : true) ? (
                <Footer
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames("__wab_instance", sty.footer, {
                    [sty.footer__state_empty]: hasVariant(
                      variants,
                      "state",
                      "empty"
                    )
                  })}
                  count={"2"}
                  state={["hasCompleted"]}
                />
              ) : null}
            </div>

            {(hasVariant(variants, "state", "empty") ? false : true) ? (
              <div
                data-plasmic-name={"fakeStack"}
                data-plasmic-override={overrides.fakeStack}
                className={classNames(projectcss.all, sty.fakeStack, {
                  [sty.fakeStack__state_empty]: hasVariant(
                    variants,
                    "state",
                    "empty"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__sHaBa, {
                    [sty.freeBox__global_theme_dark__sHaBaBeqsa]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__do0Ud, {
                    [sty.freeBox__global_theme_dark__do0UdBeqsa]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "appTitle",
    "appBody",
    "header",
    "tasksContainer",
    "footer",
    "fakeStack"
  ],

  appTitle: ["appTitle"],
  appBody: ["appBody", "header", "tasksContainer", "footer"],
  header: ["header"],
  tasksContainer: ["tasksContainer"],
  footer: ["footer"],
  fakeStack: ["fakeStack"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTodoApp__ArgProps,
      internalVariantPropNames: PlasmicTodoApp__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicTodoApp__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoApp";
  } else {
    func.displayName = `PlasmicTodoApp.${nodeName}`;
  }
  return func;
}

export const PlasmicTodoApp = Object.assign(
  // Top-level PlasmicTodoApp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appTitle: makeNodeComponent("appTitle"),
    appBody: makeNodeComponent("appBody"),
    header: makeNodeComponent("header"),
    tasksContainer: makeNodeComponent("tasksContainer"),
    footer: makeNodeComponent("footer"),
    fakeStack: makeNodeComponent("fakeStack"),
    // Metadata about props expected for PlasmicTodoApp
    internalVariantProps: PlasmicTodoApp__VariantProps,
    internalArgProps: PlasmicTodoApp__ArgProps
  }
);

export default PlasmicTodoApp;
/* prettier-ignore-end */
